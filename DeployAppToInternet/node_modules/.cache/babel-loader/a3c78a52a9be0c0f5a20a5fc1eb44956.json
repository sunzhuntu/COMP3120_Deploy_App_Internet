{"ast":null,"code":"var _jsxFileName = \"/Users/zhusun/Others/MQ-Teaching/Teaching/COMP3120-2020-S2/Program/part2/src/App.js\";\nimport React, { useState, useEffect } from 'react';\nimport logo from \"./logo.svg\";\nimport './App.css';\nimport noteService from './services/notes';\n\nconst Button = ({\n  eventHandler,\n  text\n}) => {\n  const buttonStyle = {\n    backgroundColor: 'white',\n    color: 'black',\n    padding: 10,\n    font_size: 16\n  };\n  return /*#__PURE__*/React.createElement(\"button\", {\n    style: buttonStyle,\n    onClick: eventHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14,\n      columnNumber: 10\n    }\n  }, \" \", text, \" \");\n};\n\nconst Display = ({\n  note,\n  changeImportance\n}) => {\n  const text = note.important ? 'make not important' : 'make important';\n  return /*#__PURE__*/React.createElement(\"li\", {\n    className: \"note\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 5\n    }\n  }, note.id, \" - \", note.content, \" -\", /*#__PURE__*/React.createElement(Button, {\n    eventHandler: changeImportance,\n    text: text,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }\n  }));\n};\n\nconst Notification = ({\n  message\n}) => {\n  if (message === null) {\n    return null;\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }\n  }, message);\n};\n\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('a new note');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('no error happened...'); //load all existing notes from the js-server\n\n  const hook = () => {\n    console.log('effect');\n    noteService.getAll().then(initialNotes => {\n      console.log('promoise fulfilled');\n      setNotes(initialNotes);\n    });\n  };\n\n  useEffect(hook, []); //add new notes\n\n  const addNote = event => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() < 0.5\n    };\n    noteService.createNote(noteObject).then(returnedNote => {\n      console.log(returnedNote);\n      setNotes(notes.concat(returnedNote));\n      setNewNote('a new note');\n    });\n  };\n\n  const onChangeHandler = event => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  }; //change the importance of the note\n\n\n  const changeImportantOf = id => {\n    //id = 1000\n    console.log('the importance of ', id, 'needs to be changed');\n    const note = notes.find(n => n.id === id);\n    const changedNote = { ...note,\n      important: !note.important\n    }; //const changedNote = {...note}\n\n    noteService.updateNote(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote));\n    }).catch(error => {\n      setErrorMessage('the note was already deleted from server');\n      setTimeout(() => {\n        setErrorMessage('no errors happened');\n      }, 5000);\n      setNotes(notes.filter(n => n.id !== id));\n    });\n  }; //show notes with constraint\n\n\n  const notesToShow = showAll ? notes : notes.filter(n => n.important === true);\n\n  const displayControl = () => {\n    setShowAll(!showAll);\n  };\n\n  console.log('render', notes.length, 'notes');\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 119,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 9\n    }\n  }, \" Display existing notes \"), /*#__PURE__*/React.createElement(Notification, {\n    message: errorMessage,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 122,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(Button, {\n    eventHandler: displayControl,\n    text: `Show ${showAll ? 'Important' : 'All'}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"ul\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 9\n    }\n  }, notesToShow.map(note => /*#__PURE__*/React.createElement(Display, {\n    key: note.id,\n    note: note,\n    changeImportance: () => changeImportantOf(note.id),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"h3\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 7\n    }\n  }, \" Adding new notes \"), /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: addNote,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    value: newNote,\n    onChange: onChangeHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 133,\n      columnNumber: 11\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 137,\n      columnNumber: 11\n    }\n  }, \" save \"))));\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/zhusun/Others/MQ-Teaching/Teaching/COMP3120-2020-S2/Program/part2/src/App.js"],"names":["React","useState","useEffect","noteService","Button","eventHandler","text","buttonStyle","backgroundColor","color","padding","font_size","Display","note","changeImportance","important","id","content","Notification","message","App","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","hook","console","log","getAll","then","initialNotes","addNote","event","preventDefault","noteObject","date","Date","Math","random","createNote","returnedNote","concat","onChangeHandler","target","value","changeImportantOf","find","n","changedNote","updateNote","map","catch","error","setTimeout","filter","notesToShow","displayControl","length"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport noteService from './services/notes'\n\n\nconst Button = ({eventHandler, text}) => {\n  const buttonStyle = {\n    backgroundColor: 'white',\n    color: 'black',\n    padding: 10,\n    font_size: 16\n  }\n  return <button style={buttonStyle} onClick={eventHandler}> {text} </button>\n}\n\n\nconst Display = ({note, changeImportance}) => {\n  const text = note.important\n    ? 'make not important'\n    : 'make important'\n  return(\n    <li className='note'> \n      {note.id} - {note.content} -\n      <Button eventHandler={changeImportance}  text={text}/>\n    </li>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n \nconst App = () => {\n  const [notes, setNotes] = useState([])\n  const [newNote, setNewNote] = useState('a new note')\n  const [showAll, setShowAll] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('no error happened...')\n\n  //load all existing notes from the js-server\n  const hook = () => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then (initialNotes => {\n        console.log('promoise fulfilled')\n        setNotes(initialNotes)\n      })\n  }\n  useEffect(hook, [])\n\n  //add new notes\n  const addNote = (event) => {\n    event.preventDefault()\n    const noteObject = {\n      content: newNote,\n      date: new Date(),\n      important: Math.random() < 0.5\n    }\n\n    noteService\n      .createNote(noteObject)\n      .then(returnedNote => {\n        console.log(returnedNote)\n        setNotes(notes.concat(returnedNote))\n        setNewNote('a new note')\n      })\n  }\n\n  const onChangeHandler = (event) => {\n    console.log(event.target.value)\n    setNewNote(event.target.value)\n  }\n\n  //change the importance of the note\n  const changeImportantOf = (id) => {\n    //id = 1000\n    console.log('the importance of ', id, 'needs to be changed')\n    const note = notes.find(n => n.id === id)\n    const changedNote = {...note, important: !note.important}\n    //const changedNote = {...note}\n    noteService\n      .updateNote(id, changedNote)\n      .then(returnedNote => {\n        setNotes(notes.map(note => \n          note.id !== id\n            ? note\n            : returnedNote\n        ))\n      })\n      .catch(error => {\n        setErrorMessage('the note was already deleted from server')\n        setTimeout(() => {\n          setErrorMessage('no errors happened')\n        }, 5000)\n        setNotes(notes.filter(n => n.id !== id))\n      })\n  }\n\n  //show notes with constraint\n  const notesToShow = showAll\n    ? notes\n    : notes.filter(n => n.important === true)\n  \n  const displayControl = () => {\n      setShowAll(!showAll)\n  }\n\n  console.log('render', notes.length, 'notes')\n\n  return (\n    <div>\n      <div> \n        <h3> Display existing notes </h3>\n        <Notification message={errorMessage}/>\n        <Button eventHandler={displayControl} text={`Show ${showAll? 'Important' : 'All'}` }/>\n        <ul>\n          {notesToShow.map(note => \n            <Display key={note.id} note={note} changeImportance={() => changeImportantOf(note.id)}/>\n          )}\n        </ul>\n      </div>\n      <div>\n      <h3> Adding new notes </h3>\n        <form onSubmit={addNote}>\n          <input \n            value={newNote}\n            onChange={onChangeHandler}\n          />\n          <button type=\"submit\"> save </button>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}