{"version":3,"sources":["logo.svg","services/notes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","axios","get","then","response","data","newProduct","post","id","changedProduct","put","Button","eventHandler","text","style","backgroundColor","color","padding","margin","fontSize","cursor","fontStyle","borderRadius","onClick","Display","product","changeAvailable","available","className","name","category","Notification","message","App","useState","products","setProducts","newProductName","setNewProductName","newProductCategory","setNewProductCategory","showAllProducts","setShowAllProducts","errorMessage","setErrorMessage","useEffect","console","log","noteService","initialNotes","productsToShow","filter","length","map","key","find","p","returnedProduct","catch","error","setTimeout","changeAvailableOf","onSubmit","event","preventDefault","target","productObject","Math","random","concat","value","onChange","type","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.1d17ce3a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios'\nconst baseUrl = '/api/products'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst createNote = (newProduct) => {\n    const request = axios.post(baseUrl, newProduct)\n    return request.then(response => response.data)\n}\n\nconst updateNote = (id, changedProduct) => {\n    const request = axios.put(`${baseUrl}/${id}`, changedProduct)\n    return request.then(response => response.data)\n}\n\nexport default {getAll, createNote, updateNote}\n// export default {\n//     getAll: getAll,\n//     createNote: createNote,\n//     updateNote: updateNote\n// }","import React, {useState, useEffect} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport noteService from './services/notes'\n\n\nconst Button = ({eventHandler, text}) => {\n  const buttonStyle = {\n    backgroundColor: 'white',\n    color: 'black',\n    padding: 4,\n    margin: 4,\n    fontSize: 16,\n    cursor: 'pointer',\n    fontStyle: 'italic',\n    borderRadius: 12\n  }\n  return <button style={buttonStyle} onClick={eventHandler}> {text} </button>\n}\n\n\nconst Display = ({product, changeAvailable}) => {\n  const text = product.available\n    ? 'sold out'\n    : 'available'\n  return(\n    <li className='product'> \n      {product.id} - {product.name} - {product.category}\n      <Button eventHandler={changeAvailable}  text={text}/>\n    </li>\n  )\n}\n\nconst Notification = ({ message }) => {\n  if (message === null) {\n    return null\n  }\n  return (\n    <div className=\"error\">\n      {message}\n    </div>\n  )\n}\n \nconst App = () => {\n  const [products, setProducts] = useState([])\n  const [newProductName, setNewProductName] = useState ('a new product name')\n  const [newProductCategory, setNewProductCategory] = useState ('a new product category')\n  const [showAllProducts, setShowAllProducts] = useState(true)\n  const [errorMessage, setErrorMessage] = useState('no error happened...')\n\n  //load all existing products from the server\n  const hook = () => {\n    console.log('effect')\n    noteService\n      .getAll()\n      .then (initialNotes => {\n        console.log('promoise fulfilled')\n        setProducts(initialNotes)\n      })\n  }\n  useEffect(hook, [])\n\n  //add new product\n  const addProduct = (event) => {\n    event.preventDefault()\n    console.log('button clicked', event.target)\n    const productObject = {\n      name: newProductName,\n      category: newProductCategory,\n      available: Math.random() > 0.5\n    }\n\n    noteService\n      .createNote(productObject)\n      .then(returnedProduct => {\n        console.log(returnedProduct)\n        setProducts(products.concat(returnedProduct))\n        setNewProductName('a new product name')\n        setNewProductCategory('a new product category')\n    })\n  }\n\n  const handleProductNameChange = (event) => {\n    console.log(event.target.value)\n    setNewProductName(event.target.value)\n  }\n\n  const handleProductCategoryChange = (event) => {\n    console.log(event.target.value)\n    setNewProductCategory(event.target.value)\n  }\n\n  //change the availability of the product\n  const changeAvailableOf = (id) => {\n    console.log('the availability of ', id, 'needs to be changed')\n    const product = products.find(p => p.id === id)\n    const changedProduct = {...product, available: !product.available}\n    noteService\n      .updateNote(id, changedProduct)\n      .then(returnedProduct => {\n        setProducts(products.map(product => \n          product.id !== id\n            ? product\n            : returnedProduct\n        ))\n      })\n      .catch(error => {\n        setErrorMessage('the product was already deleted from server')\n        setTimeout(() => {\n          setErrorMessage('no errors happened')\n        }, 5000)\n        setProducts(products.filter(p => p.id !== id))\n      })\n  }\n\n  //show products with constraint\n  const productsToShow = showAllProducts\n  ? products\n  : products.filter(product => product.category === 'Electronics')\n  \n  const displayControl = () => {\n      setShowAllProducts(!showAllProducts)\n  }\n\n  console.log('render', products.length, 'products')\n\n  return (\n    <div>\n      <div> \n        <h3> Display existing products </h3>\n        <Notification message={errorMessage}/>\n        <Button eventHandler={displayControl} text={`Show ${showAllProducts? 'Electronics' : 'All'}` }/>\n        <ul>\n          {productsToShow.map(product => \n            <Display key={product.id} product={product} changeAvailable={() => changeAvailableOf(product.id)}/>\n          )}\n        </ul>\n      </div>\n      <div>\n      <h3> Adding new products </h3>\n      <form onSubmit={addProduct}>\n        <input \n        value={newProductName}\n        onChange={handleProductNameChange}\n        />\n        <input \n        value={newProductCategory}\n        onChange={handleProductCategoryChange}\n        />\n        <button type=\"submit\"> Save </button>\n      </form>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React, {useState} from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}